{"version":3,"sources":["App.jsx","index.jsx"],"names":["goods","App","useState","selectedGood","setSelectedGood","isSelected","setIsSelected","selectItem","e","row","target","closest","button","currentTarget","selected","document","querySelector","classList","remove","innerText","dataset","cy","checkSelectingGood","goodInnerText","toggle","console","log","contains","add","className","type","onClick","map","good","cn","indexOf","ReactDOM","render","getElementById"],"mappings":"4OAMaA,EAAQ,CACnB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAM,WACjB,MAAwCC,mBAAS,OAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAqBMC,EAAa,SAACC,GAClB,IAAMC,EAAMD,EAAEE,OAAOC,QAAQ,MACvBC,EAASJ,EAAEK,cAEjB,GAAKJ,EAAL,EAvByB,SAACA,GAC1B,GAAIJ,EAAY,CACd,IAAMS,EAAWC,SAASC,cACxB,iCAGF,GAAIF,IAAaL,EAAK,CACpB,IAAMG,EAASE,EAASE,cAAc,WAEtCF,EAASG,UAAUC,OACjB,gCAEFN,EAAOO,UAAY,IACnBP,EAAOQ,QAAQC,GAAK,YACpBT,EAAOK,UAAUC,OAAO,aAa5BI,CAAmBb,GACnB,IAAMc,EAAgBd,EAAIO,cAAc,yBAAyBG,UAEjEV,EAAIQ,UAAUO,OAAO,gCACrBC,QAAQC,IAAIrB,GAERI,EAAIQ,UAAUU,SAAS,iCACzBf,EAAOO,UAAY,IACnBP,EAAOQ,QAAQC,GAAK,eACpBT,EAAOK,UAAUW,IAAI,WACrBxB,EAAgBmB,GAChBjB,GAAc,KAEdM,EAAOO,UAAY,IACnBP,EAAOQ,QAAQC,GAAK,YACpBT,EAAOK,UAAUC,OAAO,WACxBd,EAAgB,IAChBE,GAAc,MAwBlB,OACE,uBAAMuB,UAAU,oBAAhB,UACE,qBAAIA,UAAU,sCAAd,UACG1B,EAAY,UACNA,EADM,gBAET,oBAGHA,GACD,wBACE,UAAQ,cACR2B,KAAK,SACLD,UAAU,cACVE,QAjCa,WAEnB,GADA3B,EAAgB,IACZC,EAAY,CACd,IAAMS,EAAWC,SAASC,cACxB,iCAEIJ,EAASE,EAASE,cAAc,WAEtCS,QAAQC,IAAIZ,GAEZA,EAASG,UAAUC,OACjB,gCAEFN,EAAOO,UAAY,IACnBP,EAAOQ,QAAQC,GAAK,YACpBT,EAAOK,UAAUC,OAAO,WACxBZ,GAAc,UAsBd,uBAAOuB,UAAU,QAAjB,SACE,gCACG7B,EAAMgC,KAAI,SAAAC,GAAI,OACb,qBACE,UAAQ,OAERJ,UAAWK,IAAG,CACZ,+BAAyC,QAATD,IAJpC,UAOE,6BACE,wBACE,UAAkB,QAATA,EAAiB,eAAiB,YAC3CH,KAAK,SACLD,UAAWK,IACT,SACA,CACE,UAAoB,QAATD,IAGfF,QAASxB,EATX,SAWY,QAAT0B,EAAiB,IAAM,QAI5B,oBAAI,UAAQ,YAAYJ,UAAU,eAAlC,SACGI,MAxBL,UAEUjC,EAAMmC,QAAQF,gBC/GpCG,IAASC,OACP,cAAC,EAAD,IACAtB,SAASuB,eAAe,W","file":"static/js/main.e27e3828.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goods = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App = () => {\n  const [selectedGood, setSelectedGood] = useState('Jam');\n  const [isSelected, setIsSelected] = useState(true);\n\n  const checkSelectingGood = (row) => {\n    if (isSelected) {\n      const selected = document.querySelector(\n        '.has-background-success-light',\n      );\n\n      if (selected !== row) {\n        const button = selected.querySelector('.button');\n\n        selected.classList.remove(\n          'has-background-success-light',\n        );\n        button.innerText = '+';\n        button.dataset.cy = 'AddButton';\n        button.classList.remove('is-info');\n      }\n    }\n  };\n\n  const selectItem = (e) => {\n    const row = e.target.closest('tr');\n    const button = e.currentTarget;\n\n    if (!row) {\n      return;\n    }\n\n    checkSelectingGood(row);\n    const goodInnerText = row.querySelector('[data-cy=\"GoodTitle\"]').innerText;\n\n    row.classList.toggle('has-background-success-light');\n    console.log(isSelected);\n\n    if (row.classList.contains('has-background-success-light')) {\n      button.innerText = '-';\n      button.dataset.cy = 'RemoveButton';\n      button.classList.add('is-info');\n      setSelectedGood(goodInnerText);\n      setIsSelected(true);\n    } else {\n      button.innerText = '+';\n      button.dataset.cy = 'AddButton';\n      button.classList.remove('is-info');\n      setSelectedGood('');\n      setIsSelected(false);\n    }\n  };\n\n  const deselectItem = () => {\n    setSelectedGood('');\n    if (isSelected) {\n      const selected = document.querySelector(\n        '.has-background-success-light',\n      );\n      const button = selected.querySelector('.button');\n\n      console.log(selected);\n\n      selected.classList.remove(\n        'has-background-success-light',\n      );\n      button.innerText = '+';\n      button.dataset.cy = 'AddButton';\n      button.classList.remove('is-info');\n      setIsSelected(false);\n    }\n  };\n\n  return (\n    <main className=\"section container\">\n      <h1 className=\"title is-flex is-align-items-center\">\n        {selectedGood\n          ? `${selectedGood} is selected`\n          : 'No goods selected'\n          }\n\n        {selectedGood && (\n        <button\n          data-cy=\"ClearButton\"\n          type=\"button\"\n          className=\"delete ml-3\"\n          onClick={deselectItem}\n        />\n        )}\n      </h1>\n\n      <table className=\"table\">\n        <tbody>\n          {goods.map(good => (\n            <tr\n              data-cy=\"Good\"\n              key={`${goods.indexOf(good)}`}\n              className={cn({\n                'has-background-success-light': good === 'Jam',\n              })}\n            >\n              <td>\n                <button\n                  data-cy={good === 'Jam' ? 'RemoveButton' : 'AddButton'}\n                  type=\"button\"\n                  className={cn(\n                    'button',\n                    {\n                      'is-info': good === 'Jam',\n                    },\n                  )}\n                  onClick={selectItem}\n                >\n                  {good === 'Jam' ? '-' : '+'}\n                </button>\n              </td>\n\n              <td data-cy=\"GoodTitle\" className=\"is-vcentered\">\n                {good}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}